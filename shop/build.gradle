plugins {
	id 'jacoco'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.jetbrains.kotlin.jvm' version '1.9.24'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.24'
	id 'com.github.davidmc24.gradle.plugin.avro' version '1.9.1'
}

group = "br.com.gabriel"
version = "0.0.1-SNAPSHOT"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
	maven { url = uri("https://packages.confluent.io/maven/") }
}

dependencies {
	//libs spring
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.kafka:spring-kafka")

	//all libs
	runtimeOnly("com.h2database:h2")
	implementation("io.micrometer:micrometer-registry-prometheus")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.postgresql:postgresql:42.7.2")

	implementation("org.apache.kafka:kafka-clients:3.7.1")
	implementation("io.confluent:kafka-avro-serializer:7.6.1")
	implementation("org.apache.avro:avro:1.11.3")

	//libs for teste
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
	testImplementation("org.springframework.kafka:spring-kafka-test")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll("-Xjsr305=strict")
	}

}

tasks.named('test') {
	useJUnitPlatform()
}

// Configura o Jacoco
jacoco {
	toolVersion = '0.8.8' // Versão do Jacoco
}

tasks.withType(Test).configureEach {
	finalizedBy tasks.jacocoTestReport // Gera o relatório após os testes
}

tasks.jacocoTestReport {
	reports {
		xml.required.set(true)
		html.required.set(true)
	}
}

tasks.jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.0
			}
		}
	}
}

bootJar {
	enabled = true
}

jar {
	enabled = false
}

avro {
	createSetters = false
	enableDecimalLogicalType = true
}

generateAvroProtocol {
	source("src/main/resources/avro/")
}
generateAvroJava {
	source("src/main/resources/avro/")
	setOutputDir(file("build/generated/source/avro/main/java"))
	setStringType("CharSequence")
}

tasks.configureEach {
	if (it.name.startsWith("kaptKotlin")) {
		it.dependsOn("generateAvroJava")
	}
}

tasks.check.dependsOn tasks.jacocoTestCoverageVerification